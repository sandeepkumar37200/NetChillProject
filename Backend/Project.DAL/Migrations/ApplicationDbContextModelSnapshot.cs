// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.Database;

namespace Project.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.DAL.Domain_Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreaterdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8000);

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("MoviesPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YOR")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Project.DAL.Domain_Models.UserMovie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMovies");
                });

            modelBuilder.Entity("Project.DAL.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreaterdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(225)")
                        .HasMaxLength(225);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("SubscriptionStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0ec5135-eb77-4ac1-a15a-514b56fd976c"),
                            CreaterdAt = new DateTime(2022, 7, 23, 9, 3, 42, 513, DateTimeKind.Utc).AddTicks(7668),
                            EmailId = "admin1@netchill.com",
                            FullName = "admin1",
                            IsAdmin = true,
                            PasswordHash = new byte[] { 26, 124, 96, 130, 49, 109, 1, 89, 50, 106, 180, 127, 193, 163, 2, 47, 39, 165, 63, 229, 68, 152, 114, 29, 56, 244, 132, 206, 163, 25, 120, 252, 189, 48, 71, 44, 63, 245, 238, 30, 28, 250, 126, 124, 41, 210, 42, 197, 128, 106, 217, 143, 189, 206, 152, 144, 203, 207, 31, 192, 149, 102, 145, 100 },
                            PasswordSalt = new byte[] { 33, 252, 11, 72, 150, 35, 203, 139, 78, 144, 95, 119, 105, 178, 115, 255, 21, 191, 254, 131, 159, 149, 33, 32, 47, 114, 200, 157, 205, 173, 68, 167, 56, 247, 225, 171, 164, 92, 97, 103, 4, 109, 29, 238, 243, 46, 152, 204, 37, 47, 18, 133, 131, 207, 37, 20, 120, 200, 16, 21, 180, 62, 139, 160, 54, 238, 149, 56, 67, 222, 149, 171, 148, 24, 118, 61, 190, 89, 156, 200, 66, 22, 78, 127, 87, 162, 43, 54, 114, 229, 189, 169, 253, 14, 6, 205, 77, 102, 73, 218, 146, 47, 132, 74, 68, 60, 40, 36, 122, 104, 228, 50, 61, 29, 100, 85, 100, 160, 101, 188, 244, 95, 251, 68, 61, 95, 15, 160 },
                            SubscriptionStatus = true,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4aabae1-5e98-4010-a54e-0fafba0062b7"),
                            CreaterdAt = new DateTime(2022, 7, 23, 9, 3, 42, 513, DateTimeKind.Utc).AddTicks(8718),
                            EmailId = "admin2@netchill.com",
                            FullName = "admin2",
                            IsAdmin = true,
                            PasswordHash = new byte[] { 26, 124, 96, 130, 49, 109, 1, 89, 50, 106, 180, 127, 193, 163, 2, 47, 39, 165, 63, 229, 68, 152, 114, 29, 56, 244, 132, 206, 163, 25, 120, 252, 189, 48, 71, 44, 63, 245, 238, 30, 28, 250, 126, 124, 41, 210, 42, 197, 128, 106, 217, 143, 189, 206, 152, 144, 203, 207, 31, 192, 149, 102, 145, 100 },
                            PasswordSalt = new byte[] { 33, 252, 11, 72, 150, 35, 203, 139, 78, 144, 95, 119, 105, 178, 115, 255, 21, 191, 254, 131, 159, 149, 33, 32, 47, 114, 200, 157, 205, 173, 68, 167, 56, 247, 225, 171, 164, 92, 97, 103, 4, 109, 29, 238, 243, 46, 152, 204, 37, 47, 18, 133, 131, 207, 37, 20, 120, 200, 16, 21, 180, 62, 139, 160, 54, 238, 149, 56, 67, 222, 149, 171, 148, 24, 118, 61, 190, 89, 156, 200, 66, 22, 78, 127, 87, 162, 43, 54, 114, 229, 189, 169, 253, 14, 6, 205, 77, 102, 73, 218, 146, 47, 132, 74, 68, 60, 40, 36, 122, 104, 228, 50, 61, 29, 100, 85, 100, 160, 101, 188, 244, 95, 251, 68, 61, 95, 15, 160 },
                            SubscriptionStatus = true,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Project.DAL.Domain_Models.UserMovie", b =>
                {
                    b.HasOne("Project.DAL.Domain_Models.Movie", "Movies")
                        .WithMany("UserMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.DAL.User", "Users")
                        .WithMany("UserMovie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
